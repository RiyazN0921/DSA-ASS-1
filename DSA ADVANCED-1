//Q1.Delete the elements in an linked list whose sum is equal to zero
//Stack for global use
class Stack {
  constructor() {
    this.length = 0;
    this.items = [];
    this.push = function (value) {
      this.items.push(value);
      this.length += 1;
    };
    this.pop = function () {
      if (this.length > 0) {
        this.items.pop();
        this.length -= 1;
      } else {
        return -1;
      }
    };
  }
}
//LinkedList for global use
class Node {
  constructor(element) {
    this.element = element;
    this.next = null;
  }
}
class LinkedList {
  constructor() {
    this.head = null;
    this.size = 0;
    this.insertAt = (val, pos) => {
      if (pos < 0 || pos > this.size) {
        return console.log("Position is greater than size");
      } else {
        let node = new Node(val);
        let currNode;
        let count = 0;
        if (this.head == null) {
          this.head = node;
        } else if (pos == 0) {
          node.next = this.head;
          this.head = node;
        } else {
          currNode = this.head;
          while (count < pos - 1) {
            count++;
            currNode = currNode.next;
          }
          node.next = currNode.next;
          currNode.next = node;
        }
        this.size++;
      }
    };

    this.removeFrom = (pos) => {
      let currNode;
      let count = 0;
      if (pos < 0 || pos > this.size) {
        return console.log("Position is greater than size");
      }
      if (this.head == null) {
        return console.log("linked list does not exists");
      }
      if (pos == 0) {
        this.head = this.head.next;
      } else {
        currNode = this.head;
        while (count < pos - 1) {
          count++;
          currNode = currNode.next;
        }
        currNode.next = currNode.next.next;
      }

      this.size--;
    };

    this.mergeAlt = (list1, list2) => {
      let list1_curr = list1;
      let list2_curr = list2;
      let list1_next;
      let list2_next;

      while (list1_curr != null && list2_curr != null) {
        list1_next = list1_curr.next;
        list2_next = list2_curr.next;

        list2_curr.next = list1_next;
        list1_curr.next = list2_curr;

        list1_curr = list1_next;
        list2_curr = list2_next;
      }

      return list1;
    };
  }
  rotateBySize(k, head = this.head) {
    let current = head;
    let next = null;
    let prev = null;
    let i = 0;
    while (i < k && current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
      i++;
    }

    if (next != null) head.next = this.rotateBySize(k, next);

    return prev;
  }
}

// Q2. Reverse a linked list in groups of given size
let size = 3;
let linkedlist = new LinkedList();
linkedlist.insertAt(12, 0);
linkedlist.insertAt(15, 1);
linkedlist.insertAt(16, 2);
linkedlist.insertAt(16, 3);
linkedlist.insertAt(18, 4);
linkedlist.insertAt(11, 4);
console.log("Rotation with size " + `${3}` + " is");
console.log(linkedlist.rotateBySize(size));

//============================================================================

//Q3.Merge a linked list into another linked list at alternate positions.
let l1 = new LinkedList();
let l2 = new LinkedList();
l1.insertAt(1, 0);
l1.insertAt(3, 1);
l1.insertAt(5, 2);
l2.insertAt(2, 0);
l2.insertAt(4, 1);
l2.insertAt(6, 2);
console.log("first linked list");
console.log(l1.head);
console.log("seconf linked list");
console.log(l2.head);
console.log("merged linked list");
console.log(l1.mergeAlt(l1.head, l2.head));

//========================================================================

//Q4. In an array, Count Pairs with given sum
//Solution
let pairArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let sum = 8;
const Countpair = (array, sum) => {
  let subArr = [];
  for (let i = 0; i < array.length; i++â€¦
